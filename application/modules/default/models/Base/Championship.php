<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Default_Model_Championship', 'default');

/**
 * Default_Model_Base_Championship
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $ID
 * @property string $Name
 * @property string $LogoUrl
 * @property integer $LeagueID
 * @property integer $RacingSeriesID
 * @property integer $PostRuleID
 * @property integer $PostGameID
 * @property integer $UserID
 * @property date $DateStart
 * @property date $DateEnd
 * @property string $HotLapsIP
 * @property string $Description
 * @property timestamp $DateCreate
 * @property timestamp $DateEdit
 * @property Default_Model_League $League
 * @property Default_Model_RacingSeries $RacingSeries
 * @property Default_Model_Post $PostRule
 * @property Default_Model_Post $PostGame
 * @property Default_Model_User $User
 * @property Doctrine_Collection $RaceEvent
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class Default_Model_Base_Championship extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('championship');
        $this->hasColumn('ID', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('Name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('LogoUrl', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('LeagueID', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('RacingSeriesID', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('PostRuleID', 'integer', 8, array(
             'type' => 'integer',
             'length' => 8,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('PostGameID', 'integer', 8, array(
             'type' => 'integer',
             'length' => 8,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('UserID', 'integer', 8, array(
             'type' => 'integer',
             'length' => 8,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('DateStart', 'date', null, array(
             'type' => 'date',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('DateEnd', 'date', null, array(
             'type' => 'date',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('HotLapsIP', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('Description', 'string', 500, array(
             'type' => 'string',
             'length' => 500,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('DateCreate', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('DateEdit', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Default_Model_League as League', array(
             'local' => 'LeagueID',
             'foreign' => 'ID'));

        $this->hasOne('Default_Model_RacingSeries as RacingSeries', array(
             'local' => 'RacingSeriesID',
             'foreign' => 'ID'));

        $this->hasOne('Default_Model_Post as PostRule', array(
             'local' => 'PostRuleID',
             'foreign' => 'ID'));

        $this->hasOne('Default_Model_Post as PostGame', array(
             'local' => 'PostGameID',
             'foreign' => 'ID'));

        $this->hasOne('Default_Model_User as User', array(
             'local' => 'UserID',
             'foreign' => 'ID'));

        $this->hasMany('Default_Model_RaceEvent as RaceEvent', array(
             'local' => 'ID',
             'foreign' => 'ChampionshipID'));
    }
}
<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Default_Model_Post', 'default');

/**
 * Default_Model_Base_Post
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $ID
 * @property string $Name
 * @property string $Preview
 * @property string $Text
 * @property string $ImageUrl
 * @property integer $Views
 * @property integer $Publish
 * @property integer $PublishToSlider
 * @property integer $UserID
 * @property integer $PostCategoryID
 * @property integer $ContentTypeID
 * @property string $LastUserIP
 * @property timestamp $DateCreate
 * @property timestamp $DateEdit
 * @property Default_Model_PostCategory $PostCategory
 * @property Default_Model_ContentType $ContentType
 * @property Default_Model_User $User
 * @property Doctrine_Collection $ChampionshipRule
 * @property Doctrine_Collection $ChampionshipGame
 * @property Doctrine_Collection $Comment
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class Default_Model_Base_Post extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('post');
        $this->hasColumn('ID', 'integer', 8, array(
             'type' => 'integer',
             'length' => 8,
             'fixed' => false,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('Name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('Preview', 'string', 500, array(
             'type' => 'string',
             'length' => 500,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('Text', 'string', null, array(
             'type' => 'string',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('ImageUrl', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('Views', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('Publish', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('PublishToSlider', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('UserID', 'integer', 8, array(
             'type' => 'integer',
             'length' => 8,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('PostCategoryID', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('ContentTypeID', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('LastUserIP', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('DateCreate', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('DateEdit', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Default_Model_PostCategory as PostCategory', array(
             'local' => 'PostCategoryID',
             'foreign' => 'ID'));

        $this->hasOne('Default_Model_ContentType as ContentType', array(
             'local' => 'ContentTypeID',
             'foreign' => 'ID'));

        $this->hasOne('Default_Model_User as User', array(
             'local' => 'UserID',
             'foreign' => 'ID'));

        $this->hasMany('Default_Model_Championship as ChampionshipRule', array(
             'local' => 'ID',
             'foreign' => 'PostRuleID'));

        $this->hasMany('Default_Model_Championship as ChampionshipGame', array(
             'local' => 'ID',
             'foreign' => 'PostGameID'));

        $this->hasMany('Default_Model_Comment as Comment', array(
             'local' => 'ID',
             'foreign' => 'PostID'));
    }
}